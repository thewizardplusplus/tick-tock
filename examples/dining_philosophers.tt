// left fork
actor
  state __initialization__()
    message __initialize__()
      set free()
    ;
  ;
  state free()
    message take_fork(fork, philosopher)
      when => fork != "left" return;

      set taken()
      send fork_taken(fork, philosopher)
    ;
  ;
  state taken()
    message take_fork(fork, philosopher)
      when => fork != "left" return;
      send fork_busy(fork, philosopher)
    ;
    message put_fork(fork)
      when => fork != "left" return;
      set free()
    ;
  ;
;

// right fork
actor
  state __initialization__()
    message __initialize__()
      set free()
    ;
  ;
  state free()
    message take_fork(fork, philosopher)
      when => fork != "right" return;

      set taken()
      send fork_taken(fork, philosopher)
    ;
  ;
  state taken()
    message take_fork(fork, philosopher)
      when => fork != "right" return;
      send fork_busy(fork, philosopher)
    ;
    message put_fork(fork)
      when => fork != "right" return;
      set free()
    ;
  ;
;

// philosopher John
actor
  state __initialization__()
    message __initialize__()
      set thinking()
      send start_thinking("John")
    ;
  ;
  state thinking()
    message start_thinking(philosopher)
      when => philosopher != "John" return;

      sleep(random() * 0.5 + 0.5)
      send stop_thinking(philosopher)
    ;
    message stop_thinking(philosopher)
      when => philosopher != "John" return;

      outln("\x1b[32m" + philosopher + "\x1b[m: become hungry, try to take the \x1b[33mleft fork\x1b[m")
      set fork_waiting("left")
      send take_fork("left", philosopher)
    ;
  ;
  state fork_waiting(waited_fork)
    message fork_taken(fork, philosopher)
      when => fork != waited_fork || philosopher != "John" return;

      out("\x1b[32m" + philosopher + "\x1b[m: the \x1b[33m" + fork + " fork\x1b[m taken, ")
      when
        => fork == "left"
          outln("try to take the \x1b[33mright fork\x1b[m")

          set fork_waiting("right")
          send take_fork("right", philosopher)
        => fork == "right"
          outln("start \x1b[34meating\x1b[m")

          set eating()
          send start_eating("John")
      ;
    ;
    message fork_busy(fork, philosopher)
      when => fork != waited_fork || philosopher != "John" return;

      out("\x1b[32m" + philosopher + "\x1b[m: the \x1b[33m" + fork + " fork\x1b[m is busy, ")
      when
        => fork == "right"
          out("put the \x1b[33mleft fork\x1b[m and ")
          send put_fork("left")
      ;

      outln("return to \x1b[32mthinking\x1b[m")
      set thinking()
      send start_thinking("John")
    ;
  ;
  state eating()
    message start_eating(philosopher)
      when => philosopher != "John" return;

      sleep(random() * 0.5 + 0.5)
      send stop_eating("John")
    ;
    message stop_eating(philosopher)
      when => philosopher != "John" return;

      outln("\x1b[32m" + philosopher + "\x1b[m: stop \x1b[34meating\x1b[m, put forks and return to \x1b[32mthinking\x1b[m")
      send put_fork("left")
      send put_fork("right")
      set thinking()
      send start_thinking("John")
    ;
  ;
;

// philosopher Jane
actor
  state __initialization__()
    message __initialize__()
      set thinking()
      send start_thinking("Jane")
    ;
  ;
  state thinking()
    message start_thinking(philosopher)
      when => philosopher != "Jane" return;

      sleep(random() * 0.5 + 0.5)
      send stop_thinking(philosopher)
    ;
    message stop_thinking(philosopher)
      when => philosopher != "Jane" return;

      outln("\x1b[34m" + philosopher + "\x1b[m: become hungry, try to take the \x1b[33mright fork\x1b[m")
      set fork_waiting("right")
      send take_fork("right", philosopher)
    ;
  ;
  state fork_waiting(waited_fork)
    message fork_taken(fork, philosopher)
      when => fork != waited_fork || philosopher != "Jane" return;

      out("\x1b[34m" + philosopher + "\x1b[m: the \x1b[33m" + fork + " fork\x1b[m taken, ")
      when
        => fork == "right"
          outln("try to take the \x1b[33mleft fork\x1b[m")

          set fork_waiting("left")
          send take_fork("left", philosopher)
        => fork == "left"
          outln("start \x1b[34meating\x1b[m")

          set eating()
          send start_eating("Jane")
      ;
    ;
    message fork_busy(fork, philosopher)
      when => fork != waited_fork || philosopher != "Jane" return;

      out("\x1b[34m" + philosopher + "\x1b[m: the \x1b[33m" + fork + " fork\x1b[m is busy, ")
      when
        => fork == "left"
          out("put the \x1b[33mright fork\x1b[m and ")
          send put_fork("right")
      ;

      outln("return to \x1b[32mthinking\x1b[m")
      set thinking()
      send start_thinking("Jane")
    ;
  ;
  state eating()
    message start_eating(philosopher)
      when => philosopher != "Jane" return;

      sleep(random() * 0.5 + 0.5)
      send stop_eating("Jane")
    ;
    message stop_eating(philosopher)
      when => philosopher != "Jane" return;

      outln("\x1b[34m" + philosopher + "\x1b[m: stop \x1b[34meating\x1b[m, put forks and return to \x1b[32mthinking\x1b[m")
      send put_fork("left")
      send put_fork("right")
      set thinking()
      send start_thinking("Jane")
    ;
  ;
;
