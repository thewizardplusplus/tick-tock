class Fork
  state __initialization__()
    message initialize_fork(current_fork)
      set free(current_fork)
    ;
  ;

  state free(current_fork)
    message take_fork(fork, philosopher)
      when => fork != current_fork return;

      set taken(fork)
      send fork_taken(fork, philosopher)
    ;
  ;

  state taken(current_fork)
    message take_fork(fork, philosopher)
      when => fork != current_fork return;

      send fork_busy(fork, philosopher)
    ;

    message put_fork(fork)
      when => fork != current_fork return;

      set free(fork)
    ;
  ;
;

class Philosopher
  state __initialization__()
    message initialize_philosopher(current_philosopher, left_fork, right_fork)
      set thinking(current_philosopher, left_fork, right_fork)
      send start_thinking(current_philosopher, left_fork, right_fork)
    ;
  ;

  state thinking(current_philosopher, left_fork, right_fork)
    message start_thinking(philosopher)
      when => philosopher != current_philosopher return;

      sleep(random() * 0.5 + 0.5)
      send stop_thinking(philosopher)
    ;

    message stop_thinking(philosopher)
      when => philosopher != current_philosopher return;

      outln(philosopher + ": become hungry, try to take the fork " + strs(left_fork))
      set fork_waiting(
        philosopher, left_fork, right_fork, // class arguments
        left_fork,                          // state arguments
      )
      send take_fork(left_fork, philosopher)
    ;
  ;

  state fork_waiting(
    current_philosopher, left_fork, right_fork, // class parameters
    waited_fork,                                // state parameters
  )
    message fork_taken(fork, philosopher)
      when => fork != waited_fork || philosopher != current_philosopher return;

      out(philosopher + ": the fork " + strs(fork) + " taken, ")
      when
        => fork == left_fork
          outln("try to take the fork " + strs(right_fork))

          set fork_waiting(
            philosopher, left_fork, right_fork, // class arguments
            right_fork,                         // state arguments
          )
          send take_fork(right_fork, philosopher)
        => fork == right_fork
          outln("start eating")

          set eating(philosopher, left_fork, right_fork)
          send start_eating(philosopher)
      ;
    ;

    message fork_busy(fork, philosopher)
      when => fork != waited_fork || philosopher != current_philosopher return;

      out(philosopher + ": the fork " + strs(fork) + " is busy, ")
      when
        => fork == right_fork
          out("put the fork " + strs(left_fork) + " and ")
          send put_fork(left_fork)
      ;

      outln("return to thinking")
      set thinking(philosopher, left_fork, right_fork)
      send start_thinking(philosopher)
    ;
  ;

  state eating(current_philosopher, left_fork, right_fork)
    message start_eating(philosopher)
      when => philosopher != current_philosopher return;

      sleep(random() * 0.5 + 0.5)
      send stop_eating(philosopher)
    ;

    message stop_eating(philosopher)
      when => philosopher != current_philosopher return;

      outln(philosopher + ": stop eating, put forks and return to thinking")
      send put_fork(left_fork)
      send put_fork(right_fork)
      set thinking(philosopher, left_fork, right_fork)
      send start_thinking(philosopher)
    ;
  ;
;

actor Main
  state __initialization__()
    message __initialize__()
      // left fork
      start Fork
      send initialize_fork("left")

      // right fork
      start Fork
      send initialize_fork("right")

      // philosopher John
      start Philosopher
      send initialize_philosopher("John", "left", "right")

      // philosopher Jane
      start Philosopher
      send initialize_philosopher("Jane", "right", "left")
    ;
  ;
;
