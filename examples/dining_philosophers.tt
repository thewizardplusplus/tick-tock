class Fork(current_fork)
  state __initialization__()
    message initialize_fork()
      set free()
      send __initialize__()
    ;
  ;

  state free()
    message take_fork(fork, philosopher)
      when => fork != current_fork return;

      set taken(fork)
      send fork_taken(fork, philosopher)
    ;
  ;

  state taken()
    message take_fork(fork, philosopher)
      when => fork != current_fork return;

      send fork_busy(fork, philosopher)
    ;

    message put_fork(fork)
      when => fork != current_fork return;

      set free(fork)
    ;
  ;
;

class Philosopher(current_philosopher, left_fork, right_fork)
  state __initialization__()
    message initialize_philosopher()
      set thinking()
      send __initialize__()
    ;
  ;

  state thinking()
    message start_thinking(philosopher)
      when => philosopher != current_philosopher return;

      sleep(random() * 0.5 + 0.5)
      send stop_thinking(philosopher)
    ;

    message stop_thinking(philosopher)
      when => philosopher != current_philosopher return;

      outln(philosopher + ": become hungry, try to take the fork " + strs(left_fork))
      set fork_waiting(left_fork)
      send take_fork(left_fork, philosopher)
    ;
  ;

  state fork_waiting(waited_fork)
    message fork_taken(fork, philosopher)
      when => fork != waited_fork || philosopher != current_philosopher return;

      out(philosopher + ": the fork " + strs(fork) + " taken, ")
      when
        => fork == left_fork
          outln("try to take the fork " + strs(right_fork))

          set fork_waiting(right_fork)
          send take_fork(right_fork, philosopher)
        => fork == right_fork
          outln("start eating")

          set eating(philosopher, left_fork, right_fork)
          send start_eating(philosopher)
      ;
    ;

    message fork_busy(fork, philosopher)
      when => fork != waited_fork || philosopher != current_philosopher return;

      out(philosopher + ": the fork " + strs(fork) + " is busy, ")
      when
        => fork == right_fork
          out("put the fork " + strs(left_fork) + " and ")
          send put_fork(left_fork)
      ;

      outln("return to thinking")
      set thinking(philosopher, left_fork, right_fork)
      send start_thinking(philosopher)
    ;
  ;

  state eating()
    message start_eating(philosopher)
      when => philosopher != current_philosopher return;

      sleep(random() * 0.5 + 0.5)
      send stop_eating(philosopher)
    ;

    message stop_eating(philosopher)
      when => philosopher != current_philosopher return;

      outln(philosopher + ": stop eating, put forks and return to thinking")
      send put_fork(left_fork)
      send put_fork(right_fork)
      set thinking(philosopher, left_fork, right_fork)
      send start_thinking(philosopher)
    ;
  ;
;

actor Main()
  state __initialization__(started_actors)
    message __initialize__()
      let started_actors = started_actors || 0
      when
        => started_actors == 0
          start Fork("left")
          send initialize_fork()
        => started_actors == 1
          start Fork("right")
          send initialize_fork()
        => started_actors == 2
          start Philosopher("John", "left", "right")
          send initialize_philosopher()
        => started_actors == 3
          start Philosopher("Jane", "right", "left")
          send initialize_philosopher()
        => started_actors == 4
          send start_thinking("John")
          send start_thinking("Jane")
      ;

      set __initialization__(started_actors + 1)
    ;
  ;
;
