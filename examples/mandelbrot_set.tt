class PpmSerializer(dimensions, maximal_color)
  state __initialization__(header_outed)
    message pixel_generated(point, color)
      when
        => !header_outed
          outln("P3")
          outln(str(dimensions[0]) + " " + str(dimensions[1]))
          outln(str(maximal_color))

          set __initialization__(true)
      ;

      let color = [
        round(maximal_color * color[0]),
        round(maximal_color * color[1]),
        round(maximal_color * color[2]),
      ]
      outln(str(color[0]) + " " + str(color[1]) + " " + str(color[2]))
    ;
  ;
;

actor PointGenerator()
  state __initialization__()
    message generate_point(dimensions, point)
      let point = point || [0, 0]
      send point_generated(point)

      let point = when
        => point[0] != dimensions[0] - 1
          ([point[0] + 1, point[1]])
        => true
          when
            => point[1] != dimensions[1] - 1
              ([0, point[1] + 1])
            => true
              return
          ;
      ;
      send generate_point(dimensions, point)
    ;
  ;
;

actor Render()
  state __initialization__()
    message point_generated(point)
      let color = [random(), random(), random()]
      send pixel_generated(point, color)
    ;
  ;
;

actor Main()
  state __initialization__()
    message __initialize__()
      let dimensions = [320, 240]
      start PpmSerializer(dimensions, 255)
      send generate_point(dimensions)
    ;
  ;
;
