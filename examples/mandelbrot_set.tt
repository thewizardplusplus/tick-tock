class PpmSerializer(dimensions, maximal_color)
  state __initialization__(header_outed)
    message pixel_generated(point, color)
      when
        => !header_outed
          outln("P3")
          outln(str(dimensions.width) + " " + str(dimensions.height))
          outln(str(maximal_color))

          set __initialization__(true)
      ;

      let color = {
        red: round(maximal_color * color.red),
        green: round(maximal_color * color.green),
        blue: round(maximal_color * color.blue),
      }
      outln(str(color.red) + " " + str(color.green) + " " + str(color.blue))

      send point_serialized()
    ;
  ;
;

actor PointGenerator()
  state __initialization__()
    message generate_point(dimensions, point)
      let point = point || { x: 0, y: 0 }
      send point_generated(point)

      let index = dimensions.width * point.y + point.x
      let progress = index / (dimensions.width * dimensions.height)
      send point_generation_progress(progress)

      set point_serialization_waiting(dimensions, point)
    ;
  ;

  state point_serialization_waiting(dimensions, point)
    message point_serialized()
      set __initialization__()

      let point = when
        => point.x != dimensions.width - 1
          { x: point.x + 1, y: point.y }
        => true
          when
            => point.y != dimensions.height - 1
              { x: 0, y: point.y + 1 }
            => true
              return
          ;
      ;
      send generate_point(dimensions, point)
    ;
  ;
;

actor Render()
  state __initialization__()
    message point_generated(point)
      let color = { red: random(), green: random(), blue: random() }
      send pixel_generated(point, color)
    ;
  ;
;

actor Main()
  state __initialization__()
    message __initialize__()
      let width = num(env("WIDTH") || "320")
      when
        => width == nil
          errln("Error: unable to parse the width.")
          return
      ;

      let height = num(env("HEIGHT") || "240")
      when
        => height == nil
          errln("Error: unable to parse the height.")
          return
      ;

      let dimensions = { width: width, height: height }
      start PpmSerializer(dimensions, 255)
      send generate_point(dimensions)
    ;

    message point_generation_progress(progress)
      let progress = round(100 * progress)
      err("\rdone by " + str(progress) + "%")
    ;
  ;
;
